//
//  interview.cpp
//  avm_tests
//
//  Created by Harry Kalodner on 11/30/20.
//

#include "interview.hpp"
#include "ecops.hpp"

#include <avm_values/tuple.hpp>
#include <avm_values/value.hpp>

#include <catch2/catch.hpp>

using namespace intx;

TEST_CASE("Interview") {
    const std::string value_hex =
        "080000000000000000000000000000000000000000000000000000000000000000000A"
        "0000000000000000000000000000000000000000000000000000000000000000030000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000040100DAFF0B4FD7C252"
        "43AEEB7272B4DA5E1A9CFD94555DA52B6F2D9723B0B5DF4D6605000000000000000000"
        "0000000000000000000000000000000000000000000004E805006C634300050A003200"
        "00000000000000000000000000000000000000000000000500BBCCDFA25C64A8B94976"
        "2E9C90598207E81D87445D15183BBC7E658F8464736F050084856103BF565B6103B256"
        "5B90509291505056FEA265627A7A72305820A1848D05005B6000818302905092915050"
        "565B60006103EA6103DB84856103BF565B6103E5050090602001909291905050509050"
        "8091505090565B60008183019050929150505605006000FD5B505050506040513D6020"
        "81101561039857600080FD5B81019080805105008186803B15801561036E57600080FD"
        "5B505AFA158015610382573D6000803E3D0500FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16"
        "8152602001915050602060405180830305000401808273FFFFFFFFFFFFFFFFFFFFFFFF"
        "FFFFFFFFFFFFFFFF1673FFFFFFFFFF0500FFFFFFFFFFFFFFFFFF166323CA0CD2336040"
        "518263FFFFFFFF1660E01B815260050000803E3D6000FD5B5050505050565B60008060"
        "6473FFFFFFFFFFFFFFFFFFFFFF0500808303818588803B1580156102D257600080FD5B"
        "505AF11580156102E6573D600500FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF168152"
        "602001915050600060405105008152600401808273FFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        "FFFFFFFFFFFF1673FFFF0500FFFFFFFFFFFFFFFFFF166325E160633461040160405183"
        "63FFFFFFFF1660E01B0500573D6000803E3D6000FD5B5050505050565B606473FFFFFF"
        "FFFFFFFFFFFFFFFF0500604051808303818588803B15801561023557600080FD5B505A"
        "F1158015610249050073FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1681526020"
        "019150506000050060E01B8152600401808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        "FFFFFFFF160500FFFFFFFFFFFFFFFFFFFF166325E160636113886104016040518363FF"
        "FFFFFF1605008082815260200191505060405180910390F35B606473FFFFFFFFFFFFFF"
        "FFFFFF05008080359060200190929190803590602001909291905050506103CC565B60"
        "4051050057600080FD5B5061019B6004803603604081101561017B57600080FD5B8101"
        "90050003BF565B6040518082815260200191505060405180910390F35B348015610164"
        "05000080FD5B8101908080359060200190929190803590602001909291905050506105"
        "005B34801561010B57600080FD5B506101426004803603604081101561012257600500"
        "9291905050506103B2565B6040518082815260200191505060405180910390F3050010"
        "156100C957600080FD5B81019080803590602001909291908035906020019005004051"
        "80910390F35B3480156100B257600080FD5B506100E960048036036040810500610087"
        "57600080FD5B506100906102ED565B6040518082815260200191505060050000665760"
        "0080FD5B5061006F6101B1565B005B610079610250565B005B348015050080639AA727"
        "F6146100FF578063E4156BC514610158575B600080FD5B3480156105006349C1CC7B14"
        "6100715780636D15C4571461007B578063771602F7146100A6570500FE608060405260"
        "0436106100555760003560E01C806325B21B2E1461005A578005000060806040523480"
        "1561001057600080FD5B50610427806100206000396000F30500000000000000000000"
        "0000000000000000000000000000000000000000000000050000000000000000000000"
        "0000000000000000000000000000000000000000000005000000000000000000000000"
        "0000000000000000000000000000000000000000000500000000000000000000000000"
        "0000000000000000000000000000000000000000050000000000000000000000000000"
        "000000000000000000000000000000E8D4A51003060000000000000000000000000000"
        "0000000000000000000000000000000000000100000000000000000000000000000000"
        "000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0600000000000000000000000000000000000000"
        "0000000000000000000000000000050000000000000000000000000000000000000000"
        "000000000000000000000000200500000000000000000000000000F3657C93FAD96709"
        "257A672CA0D6E651772E03490303050000000000000000000000000000000000000000"
        "00000000000000000000024EB600000000000000000000000000000000000000000000"
        "0000000000000000000000060000000000000000000000000000000000000000000000"
        "00000000000000024EB600000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "000000000000";

    auto value_data = hexToVec(value_hex);

    auto hash = from_string<uint256_t>(
        "9353889881795822628184863075970130152217505515345439063441675960085767"
        "2415179");

    value deserialized_val;
    // initialize this from value_data

    // Useful functions

    //    char *bufptr;
    //    auto ret = intx::be::unsafe::load<uint256_t>(reinterpret_cast<const
    //    unsigned char*>(bufptr));
    //
    //    std::vector<value> values;
    //    for (uint8_t j = 0; j < 7; ++j) {
    //        values.push_back(uint256{6});
    //    }
    //    Tuple::createTuple(std::move(values));

    REQUIRE(hash_value(deserialized_val) == hash);
}
